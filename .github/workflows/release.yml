# This GitHub Actions workflow is triggered when a new tag is pushed to the repository.
# It can also be triggered manually from the GitHub Actions UI.
# It builds the Tauri application for multiple targets, creates a GitHub Release,
# and uploads the compiled application artifacts to that release.

name: Release

# Controls when the workflow will run
on:
    # Triggers the workflow on push events, but only for tags that match the pattern 'v*.*.*'
    # e.g., v1.0.0, v1.2.3, v0.1.0-beta.1
    push:
        tags:
            - "v*.*.*"

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

jobs:
    # The main job that builds and releases the application for multiple platforms
    release-tauri:
        permissions:
            contents: write
        strategy:
            fail-fast: false
            matrix:
                include:
                    - platform: "macos-13" # Intel Mac
                      target: "x86_64-apple-darwin"
                    - platform: "macos-14" # Apple Silicon Mac
                      target: "aarch64-apple-darwin"
                    - platform: "ubuntu-22.04" # For x86_64 .deb, .AppImage, and .rpm
                      target: "x86_64-unknown-linux-gnu"
                    - platform: "windows-latest"
                      target: "x86_64-pc-windows-msvc"

        # The type of runner that the job will run on
        runs-on: ${{ matrix.platform }}

        steps:
            # Step 1: Check out the repository's code
            - name: Checkout repository
              uses: actions/checkout@v4

            # Step 2: Install Linux-specific dependencies (only on Linux runners)
            - name: Install dependencies (Linux)
              if: matrix.platform == 'ubuntu-22.04'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

            # Step 3: Setup pnpm
            - name: Setup pnpm
              uses: pnpm/action-setup@v3
              with:
                  version: 10

            # Step 4: Install Tauri CLI globally
            - name: Install Tauri CLI
              run: pnpm add -g @tauri-apps/cli

            # Step 5: Install frontend dependencies
            - name: Install Dependencies
              run: pnpm install

            # Step 6: Sync SvelteKit to generate necessary files
            # It ensures .svelte-kit/tsconfig.json exists before the build starts.
            - name: Sync SvelteKit
              run: pnpm svelte-kit sync

            # Step 7a: Read the ENTIRE changelog for the updater's JSON file
            - name: Read full changelog for updater
              id: read_full_changelog
              shell: bash # Ensures this runs correctly on Windows
              run: |
                  content=$(cat ./CHANGELOG.md)
                  echo "changes<<EOF" >> $GITHUB_OUTPUT
                  echo "$content" >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT

            # Step 7b: Read ONLY THE LATEST entry for the public GitHub Release notes
            - name: Read latest changelog entry for GitHub Release
              id: read_latest_changelog
              uses: mindsers/changelog-reader-action@v2
              with:
                  # Use the git tag (e.g., "v0.3.0") to find the correct version
                  version: ${{ github.ref_name }}
                  # The path to your changelog file
                  path: ./CHANGELOG.md

            # Step 8: Build the Tauri application and create the release
            # This step uses the FULL changelog to ensure `latest.json` contains all the data our app needs.
            - name: Build and Release
              uses: tauri-apps/tauri-action@v0
              env:
                  # This token is provided by GitHub Actions for authentication.
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  # Sign the app with personal tauri key
                  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
                  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
              with:
                  # Pass the target triple to the build command
                  args: --target ${{ matrix.target }}

                  # The tag name that will be used for the release.
                  tagName: ${{ github.ref_name }}

                  # The name of the release, using the git tag directly.
                  releaseName: "Chronicler ${{ github.ref_name }}"
                  # Use the FULL changelog here. This populates the `notes` field in the generated `latest.json`.
                  releaseBody: ${{ steps.read_full_changelog.outputs.changes }}
                  releaseDraft: true # It's safest to create a draft first

            # Step 9: Update the public GitHub Release notes to be clean and concise
            # This step now combines the latest changelog with helpful installation instructions.
            - name: Update release notes for clarity
              if: matrix.platform == 'ubuntu-22.04' # Run this step only once to avoid race conditions
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              shell: bash # Ensures this runs correctly on Windows
              run: |
                  # The latest changelog entries from the previous step
                  LATEST_CHANGES="${{ steps.read_latest_changelog.outputs.changes }}"

                  # Your static installation and security notes stored in a variable
                  INSTALL_NOTES=$(cat <<'EOF'

                  ## Installation & Notes

                  - **💻 Windows**: Download the `.msi` file to install.
                  - **🐧 Linux**: Download the `.AppImage` (for most distributions) or the `.deb` / `.rpm` file for your package manager.
                  - **🍎 macOS**: Download the `aarch64.dmg` (Apple Silicon) or `x64.dmg` (Intel) file.

                  ---

                  ### ⚠️ A Note for Windows Users
                  When you first run the installer, Microsoft Defender may show a "Windows protected your PC" screen. This is expected because Chronicler is a new application from an independent developer and is not yet code-signed.

                  To proceed, simply click **"More info"** and then **"Run anyway"**.

                  ### 🍎 A Note for macOS Users
                  Chronicler for macOS is currently **unsigned**. The first time you open it, you will need to run a command in the Terminal.

                  1.  **Download** the `.dmg` file and move the app to your **Applications** folder.
                  2.  **Open the Terminal** app.
                  3.  **Run this command**:
                      ```sh
                      sudo xattr -rd com.apple.quarantine /Applications/chronicler.app
                      ```
                  4.  The app will now open correctly.

                  ### 🛡️ Security & Trust
                  While the initial installer is unsigned, all in-app updates are cryptographically signed by me. This is handled by [Tauri's built-in updater](https://tauri.app/plugin/updater), which verifies the update signature before installing it. This ensures that all future updates are authentic and have not been tampered with.
                  EOF
                  )

                  # Combine the two parts and pass them to the GitHub CLI
                  gh release edit ${{ github.ref_name }} --notes "$LATEST_CHANGES$INSTALL_NOTES"
